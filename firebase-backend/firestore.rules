rules_version = '2';
service cloud.firestore {
match /databases/{database}/documents {

// Public users collection: a user can only edit their own document.
match /users/{userId} {
  allow read: if request.auth != null;
  allow write: if request.auth != null && request.auth.uid == userId;
}

// Authorities collection: only a superadmin can create new authorities.
// An authority can read their own profile.
match /authorities/{userId} {
  allow read: if request.auth != null && (request.auth.uid == userId || request.auth.token.role == 'superadmin');
  allow create: if request.auth.token.role == 'superadmin';
  allow update: if request.auth.token.role == 'superadmin';
}

// Issues collection: This is the core logic.
match /issues/{issueId} {
  // Anyone authenticated (citizens, authorities) can read issues.
  allow read: if request.auth != null;

  // Only citizens (who don't have a role claim) can create issues.
  allow create: if request.auth != null && !exists(request.auth.token.role);

  // An authority can ONLY update issues that are in their assigned zone.
  // A superadmin can update any issue.
  allow update: if request.auth != null &&
                ( (request.auth.token.role == 'authority' && request.auth.token.zone == resource.data.issueZone) ||
                  request.auth.token.role == 'superadmin' );

  // No one can delete issues for now to maintain a record.
  allow delete: if false;
}

}
}